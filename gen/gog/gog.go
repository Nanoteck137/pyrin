package gog

import (
	"fmt"
	"io"
	"strings"

	"github.com/iancoleman/strcase"
	"github.com/nanoteck137/pyrin/client"
	"github.com/nanoteck137/pyrin/resolve"
	"github.com/nanoteck137/pyrin/util"
)

func GenerateTypeCode(w io.Writer, resolver *resolve.Resolver) error {
	// TODO(patrik): Change this
	fmt.Fprintln(w, "// THIS FILE IS GENERATED BY PYRIN GOGEN CODE GENERATOR")
	fmt.Fprintln(w, "package api")
	fmt.Fprintln(w)

	for _, s := range resolver.ResolvedStructs {
		switch ty := s.Type.(type) {
		case *resolve.TypeStruct:
			fmt.Fprintf(w, "type %s struct {\n", s.Name)

			for _, f := range ty.Fields {
				GenerateField(w, &f)
			}

			fmt.Fprintln(w, "}")
			fmt.Fprintln(w)
		case *resolve.TypeSameStruct:
			fmt.Fprintf(w, "type %s %s\n", s.Name, ty.Type.Name)
			fmt.Fprintln(w)
		}

	}

	return nil
}

func GenerateType(typ resolve.Type) string {
	switch t := typ.(type) {
	case *resolve.TypeString:
		return "string"
	case *resolve.TypeInt:
		return "int"
	case *resolve.TypeBoolean:
		return "bool"
	case *resolve.TypeStruct:
		return t.Name
	case *resolve.TypeArray:
		return "[]" + GenerateType(t.ElementType)
	case *resolve.TypePtr:
		return "*" + GenerateType(t.BaseType)
	}

	return ""
}

func GenerateField(w io.Writer, field *resolve.Field) {
	jsonName := field.Name
	name := strcase.ToCamel(field.Name)

	switch field.Type.(type) {
	case *resolve.TypePtr:
		fmt.Fprintf(w, "\t%s %s `json:\"%s,omitempty\"`\n", name, GenerateType(field.Type), jsonName)
	default:
		fmt.Fprintf(w, "\t%s %s `json:\"%s\"`\n", name, GenerateType(field.Type), jsonName)
	}
}


// TODO(patrik): Example
/*
func (c *Client) GetPlaylistById(id string, options Options) (*GetPlaylistById, error) {
	path := fmt.Sprintf("/api/v1/playlists/%v", id)
	url, err := createUrl(c.addr, path, options.QueryParams)
	if err != nil {
		return nil, err
	}

	data := RequestData{
		Url: url,
		Method: http.MethodGet,
		Token: c.token,
		Body: nil,
	}
	return Request[GetPlaylistById](data)
}
*/

func generateCodeForEndpoint(w *util.CodeWriter, e *client.Endpoint) error {
	resType := e.ResponseType

	if resType == "" {
		resType = "any"
	}

	var args []string
	parts := strings.Split(e.Path, "/")
	endpointHasArgs := false

	for i, p := range parts {
		if len(p) == 0 {
			continue
		}

		if p[0] == ':' {
			name := p[1:]
			args = append(args, name)

			parts[i] = "%v"

			endpointHasArgs = true
		}
	}

	newPath := strings.Join(parts, "/")

	b := strings.Builder{}

	for _, v := range args {
		fmt.Fprintf(&b, "%s string, ", v)
	}

	if e.BodyType != "" {
		fmt.Fprintf(&b, "body %s, ", e.BodyType)
	}

	fmt.Fprintf(&b, "options Options")

	w.IWritef("func (c *Client) %v(%s) (*%s, error) {\n", e.Name, b.String(), resType)
	w.Indent()

	if endpointHasArgs {
		b := strings.Builder{}
		for _, v := range args {
			fmt.Fprintf(&b, ", %s", v)
		}

		w.IWritef("path := Sprintf(\"%v\"%s)\n", newPath, b.String())
	} else {
		w.IWritef("path := \"%v\"\n", e.Path)
	}
	w.IWritef("url, err := createUrl(c.addr, path, options.QueryParams)\n")
	w.IWritef("if err != nil {\n")
	w.Indent()
	w.IWritef("return nil, err\n")
	w.Unindent()
	w.IWritef("}\n")

	w.Writef("\n")

	w.IWritef("data := RequestData{\n")
	w.Indent()

	w.IWritef("Url: url,\n")
	w.IWritef("Method: \"%v\",\n", e.Method)
	w.IWritef("Token: c.token,\n")
	w.IWritef("Body: nil,\n")

	w.Unindent()
	w.IWritef("}\n")

	w.IWritef("return Request[%s](data)\n", resType)

	w.Unindent()
	w.IWritef("}\n")

	return nil
}

func GenerateClientCode(w io.Writer, server *client.Server) error {
	cw := util.CodeWriter{
		Writer:    w,
		IndentStr: "\t",
	}

	cw.IWritef("// DO NOT EDIT THIS: This file was generated by the Pyrin Golang Generator\n")
	cw.IWritef("package api\n")

	for _, endpoint := range server.Endpoints {
		cw.IWritef("\n")

		err := generateCodeForEndpoint(&cw, &endpoint)
		if err != nil {
			return err
		}
	}

	return nil
}
